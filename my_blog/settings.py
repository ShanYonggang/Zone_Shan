"""
Django settings for my_blog project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import pymysql

pymysql.install_as_MySQLdb()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3pegnr&-^1yw8+y1ol(%g^!=ks36axxwb_%pceni$f@jiggeru'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',   #  全文搜索引擎模块
    'simpleui',   # 后台管理页面模版
    'index',  # 博客主页以及博客文章详细界面
    'user_profile',  # 博客用户管理app(在user基础之上拓展)
    'comments',  # 博客评论模块
    'taggit',   # 博客标签模块
    'taggit_templatetags2', # 标签云模块
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 文件上传
    'about',   # 关于我模块
    'development',  # 网站发展历程模块 
    'friend_link',   # 网站友情链接模块
    'knowledge',  # 资料统计模块
    'mptt',  # 多级评论
    # 第三方登录模块app文件
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # 可添加需要的第三方登录
    'allauth.socialaccount.providers.weibo',
    'allauth.socialaccount.providers.weixin',
    'allauth.socialaccount.providers.baidu',
    'allauth.socialaccount.providers.douban',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.gitlab',
    'allauth.socialaccount.providers.linkedin',
    # 美化表单
    'crispy_forms',
    # 消息通知
    'notifications',
    # 自定义消息模块
    'notice',
    # 网站地图
    'django.contrib.sitemaps',
]

CRISPY_TEMPLATE_PACK = 'bootstrap'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# SMTP服务器
EMAIL_HOST = 'smtp.qq.com'
# 邮箱名
EMAIL_HOST_USER = 'syg511248513@foxmail.com'
# 邮箱密码
EMAIL_HOST_PASSWORD = 'xxxxxxxxxxxxx'
# 发送邮件的端口
EMAIL_PORT = 587
# 是否使用 TLS
EMAIL_USE_TLS = True
# 加密模式
MAIL_USE_SSL = False
# 默认的发件人
DEFAULT_FROM_EMAIL = 'syg511248513@foxmail.com'
# 本地注册时需要邮箱
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# 指定要使用的登录方法(用户名、电子邮件地址两者之一)
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# 要求用户注册时必须填写email
ACCOUNT_EMAIL_REQUIRED = True
# 作用于第三方账号的注册
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

# 用户登录配置
SITE_ID = 1
# 用户登录跳转
LOGIN_REDIRECT_URL = '/'
# 用户退出跳转
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
# 用户退出是否需要确认
ACCOUNT_LOGOUT_ON_GET = False
# 更改为True，用户一旦确认他们的电子邮件地址，就会自动登录
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
# 更改或设置密码后是否自动退出
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
# 更改为True，用户将在重置密码后自动登录
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True

AUTHENTICATION_BACKENDS = (
    # Django 后台可独立于 allauth 登录
    'django.contrib.auth.backends.ModelBackend',

    # 配置 allauth 独有的认证方法，如 email 登录
    'allauth.account.auth_backends.AuthenticationBackend',
)


#App settings(美化form表单)
CRISPY_TEMPLATE_PACK = 'bootstrap3'

# 标签云数量显示（默认显示10个）
TAGGIT_LIMIT = 1000

# 七牛云存储配置（2019.11.8号添加）
QINIU_ACCESS_KEY = 'xxxxxxxxxxxxxxx'
QINIU_SECRET_KEY = 'xxxxxxxxxxxxxxxxx'
QINIU_BUCKET_NAME = 'my-web-blog'
QINIU_BUCKET_DOMAIN = 'qiniu.shanyonggang.cn'

# 其它设置...(让 Django 用户认证系统使用我们自定义的用户模型)
AUTH_USER_MODEL = 'user_profile.UserProfile'

# 配置搜索引擎后端（全文搜索功能）
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎：提示，如果不需要使用jieba框架实现分词，就使用whoosh_backend
        'ENGINE': 'index.whoosh_cn_backend.WhooshEngine',
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    },
}
# 指定每页显示的结果数量
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10   

HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'   # 索引自动更新

# 配置ckeditor
# # 七牛云图片存储配置
CKEDITOR_JQUERY_URL = '//cdn.bootcss.com/jquery/1.11.3/jquery.min.js'
# CKEDITOR_IMAGE_BACKEND = 'pillow'   # 上传七牛云时要备注掉
DEFAULT_FILE_STORAGE = 'index.ckeditor_storage.StorageObject'  # app名称.app下的文件名称.类名
CKEDITOR_UPLOAD_PATH = ''   # 图片ckeditor文件上传路径, 这里使用七牛云存储，不填


CKEDITOR_CONFIGS = {
    # django-ckeditor默认使用default配置
    'default': {
        # 编辑器宽度自适应
        'width':'auto',
        'height':'250px',
        # tab键转换空格数
        'tabSpaces': 4,
        # 工具栏风格
        'toolbar': 'Custom',
        # 工具栏按钮
        'toolbar_Custom': [
            ['Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates'],
            ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo'],
            ['Find', 'Replace', '-', 'SelectAll'],
            ['Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button', 'ImageButton', 'HiddenField'],
            ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', 'CreateDiv', '-',
            'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl',
            'Language'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak', 'Iframe'],
            ['Styles', 'Format', 'Font', 'FontSize'],
            ['TextColor', 'BGColor'],
            ['Maximize', 'ShowBlocks'],
            ['About'],
            [# put the name of your editor.ui.addButton here
                'Preview',
                'Maximize',

            ],
            # 表情 代码块
            ['Smiley', 'CodeSnippet'],  
        ],
        # 加入代码块插件
        # uploadimage: 允许用户直接在编辑器里复制粘贴
        # prism：允许代码高亮显示
        # codesnippet：添加代码块的功能
        'extraPlugins': ','.join(['codesnippet', 'prism', 'widget', 'lineutils','uploadimage']),
    }
}

# django缓存配置
CACHES = {
 'default': {
  'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',  # 指定缓存使用的引擎
  'LOCATION': 'unique-snowflake',         # 写在内存中的变量的唯一值
  'TIMEOUT': 300,             # 缓存超时时间(默认为300秒,None表示永不过期)
  'OPTIONS': {
   'MAX_ENTRIES': 300,           # 最大缓存记录的数量（默认300）
   'CULL_FREQUENCY': 3,          # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）
  }
 }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'my_blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'my_blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# 静态文件存储到七牛云上(https暂时不可访问，所以静态文件暂时放在static中)
# STATIC_URL = QINIU_BUCKET_DOMAIN + '/static/'
#
# STATICFILES_DIRS = [os.path.join(BASE_DIR, "static").replace('\\', '/'), ]
#
# STATIC_ROOT = 'static/'

# STATICFILES_STORAGE = 'qiniustorage.backends.QiniuStaticStorage'

# 静态文件配置
STATIC_URL = '/static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static").replace('\\', '/'), ]

STATIC_ROOT = 'static/'

# 媒体文件配置
MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_ROOT = 'media/'
